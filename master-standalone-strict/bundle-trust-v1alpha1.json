{
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "trust.cert-manager.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "Bundle"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Desired state of the Bundle resource.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "sources",
        "target"
      ],
      "properties": {
        "sources": {
          "description": "Sources is a set of references to data whose data will sync to the target.",
          "type": "array",
          "items": {
            "description": "BundleSource is the set of sources whose data will be appended and synced to\nthe BundleTarget in all Namespaces.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "configMap": {
                "description": "ConfigMap is a reference (by name) to a ConfigMap's `data` key, or to a\nlist of ConfigMap's `data` key using label selector, in the trust Namespace.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "Key is the key of the entry in the object's `data` field to be used.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the source object in the trust Namespace.\nThis field must be left empty when `selector` is set",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selector": {
                    "description": "Selector is the label selector to use to fetch a list of objects. Must not be set\nwhen `Name` is set.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "inLine": {
                "description": "InLine is a simple string to append as the source data.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "secret": {
                "description": "Secret is a reference (by name) to a Secret's `data` key, or to a\nlist of Secret's `data` key using label selector, in the trust Namespace.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "Key is the key of the entry in the object's `data` field to be used.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the source object in the trust Namespace.\nThis field must be left empty when `selector` is set",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selector": {
                    "description": "Selector is the label selector to use to fetch a list of objects. Must not be set\nwhen `Name` is set.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "useDefaultCAs": {
                "description": "UseDefaultCAs, when true, requests the default CA bundle to be used as a source.\nDefault CAs are available if trust-manager was installed via Helm\nor was otherwise set up to include a package-injecting init container by using the\n\"--default-package-location\" flag when starting the trust-manager controller.\nIf default CAs were not configured at start-up, any request to use the default\nCAs will fail.\nThe version of the default CA package which is used for a Bundle is stored in the\ndefaultCAPackageVersion field of the Bundle's status field.",
                "type": [
                  "boolean",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "target": {
          "description": "Target is the target location in all namespaces to sync source data to.",
          "type": "object",
          "properties": {
            "additionalFormats": {
              "description": "AdditionalFormats specifies any additional formats to write to the target",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "jks": {
                  "description": "JKS requests a JKS-formatted binary trust bundle to be written to the target.\nThe bundle has \"changeit\" as the default password.\nFor more information refer to this link https://cert-manager.io/docs/faq/#keystore-passwords",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Key is the key of the entry in the object's `data` field to be used.",
                      "type": "string"
                    },
                    "password": {
                      "description": "Password for JKS trust store",
                      "type": [
                        "string",
                        "null"
                      ],
                      "maxLength": 128,
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false
                },
                "pkcs12": {
                  "description": "PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target.\nThe bundle is by default created without a password.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Key is the key of the entry in the object's `data` field to be used.",
                      "type": "string"
                    },
                    "password": {
                      "description": "Password for PKCS12 trust store",
                      "type": [
                        "string",
                        "null"
                      ],
                      "maxLength": 128
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "configMap": {
              "description": "ConfigMap is the target ConfigMap in Namespaces that all Bundle source\ndata will be synced to.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "Key is the key of the entry in the object's `data` field to be used.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "namespaceSelector": {
              "description": "NamespaceSelector will, if set, only sync the target resource in\nNamespaces which match the selector.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "matchLabels": {
                  "description": "MatchLabels matches on the set of labels that must be present on a\nNamespace for the Bundle target to be synced there.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "secret": {
              "description": "Secret is the target Secret that all Bundle source data will be synced to.\nUsing Secrets as targets is only supported if enabled at trust-manager startup.\nBy default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "description": "Key is the key of the entry in the object's `data` field to be used.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "Status of the Bundle. This is set and managed automatically.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "List of status conditions to indicate the status of the Bundle.\nKnown condition types are `Bundle`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "BundleCondition contains condition information for a Bundle.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the timestamp corresponding to the last status\nchange of this condition.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "Message is a human-readable description of the details of the last\ntransition, complementing reason.",
                "type": [
                  "string",
                  "null"
                ],
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "If set, this represents the .metadata.generation that the condition was\nset based upon.\nFor instance, if .metadata.generation is currently 12, but the\n.status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the Bundle.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "Reason is a brief machine-readable explanation for the condition's last\ntransition.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "Type of the condition, known values are (`Synced`).",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "defaultCAVersion": {
          "description": "DefaultCAPackageVersion, if set and non-empty, indicates the version information\nwhich was retrieved when the set of default CAs was requested in the bundle\nsource. This should only be set if useDefaultCAs was set to \"true\" on a source,\nand will be the same for the same version of a bundle with identical certificates.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "trust.cert-manager.io",
      "kind": "Bundle",
      "version": "v1alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}