{
  "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "flows.netobserv.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "FlowCollector"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Defines the desired state of the FlowCollector resource.\n<br><br>\n*: the mention of \"unsupported\", or \"deprecated\" for a feature throughout this document means that this feature\nis not officially supported by Red Hat. It might have been, for example, contributed by the community\nand accepted without a formal agreement for maintenance. The product maintainers might provide some support\nfor these features as a best effort only.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "agent": {
          "description": "Agent configuration for flows extraction.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "ebpf": {
              "description": "`ebpf` describes the settings related to the eBPF-based flow reporter when `spec.agent.type`\nis set to `EBPF`.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "cacheActiveTimeout": {
                  "description": "`cacheActiveTimeout` is the max period during which the reporter aggregates flows before sending.\nIncreasing `cacheMaxFlows` and `cacheActiveTimeout` can decrease the network traffic overhead and the CPU load,\nhowever you can expect higher memory consumption and an increased latency in the flow collection.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^\\d+(ns|ms|s|m)?$"
                },
                "cacheMaxFlows": {
                  "description": "`cacheMaxFlows` is the max number of flows in an aggregate; when reached, the reporter sends the flows.\nIncreasing `cacheMaxFlows` and `cacheActiveTimeout` can decrease the network traffic overhead and the CPU load,\nhowever you can expect higher memory consumption and an increased latency in the flow collection.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 1
                },
                "debug": {
                  "description": "`debug` allows setting some aspects of the internal configuration of the eBPF agent.\nThis section is aimed exclusively for debugging and fine-grained performance optimizations,\nsuch as `GOGC` and `GOMAXPROCS` env vars. Set these values at your own risk.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "env": {
                      "description": "`env` allows passing custom environment variables to underlying components. Useful for passing\nsome very concrete performance-tuning options, such as `GOGC` and `GOMAXPROCS`, that should not be\npublicly exposed as part of the FlowCollector descriptor, as they are only useful\nin edge debug or support scenarios.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "excludeInterfaces": {
                  "description": "`excludeInterfaces` contains the interface names that are excluded from flow tracing.\nAn entry enclosed by slashes, such as `/br-/`, is matched as a regular expression.\nOtherwise it is matched as a case-sensitive string.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "features": {
                  "description": "List of additional features to enable. They are all disabled by default. Enabling additional features might have performance impacts. Possible values are:<br>\n- `PacketDrop`: enable the packets drop flows logging feature. This feature requires mounting\nthe kernel debug filesystem, so the eBPF pod has to run as privileged.\nIf the `spec.agent.ebpf.privileged` parameter is not set, an error is reported.<br>\n- `DNSTracking`: enable the DNS tracking feature.<br>\n- `FlowRTT`: enable flow latency (sRTT) extraction in the eBPF agent from TCP traffic.<br>",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Agent feature, can be one of:<br>\n- `PacketDrop`, to track packet drops.<br>\n- `DNSTracking`, to track specific information on DNS traffic.<br>\n- `FlowRTT`, to track TCP latency. [Unsupported (*)].<br>",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "PacketDrop",
                      "DNSTracking",
                      "FlowRTT"
                    ]
                  }
                },
                "flowFilter": {
                  "description": "`flowFilter` defines the eBPF agent configuration regarding flow filtering",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "action": {
                      "description": "Action defines the action to perform on the flows that match the filter.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "Accept",
                        "Reject"
                      ]
                    },
                    "cidr": {
                      "description": "CIDR defines the IP CIDR to filter flows by.\nExample: 10.10.10.0/24 or 100:100:100:100::/64",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "destPorts": {
                      "description": "DestPorts defines the destination ports to filter flows by.\nTo filter a single port, set a single port as an integer value. For example destPorts: 80.\nTo filter a range of ports, use a \"start-end\" range, string format. For example destPorts: \"80-100\".",
                      "x-kubernetes-int-or-string": true
                    },
                    "direction": {
                      "description": "Direction defines the direction to filter flows by.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "Ingress",
                        "Egress"
                      ]
                    },
                    "enable": {
                      "description": "Set `enable` to `true` to enable eBPF flow filtering feature.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "icmpCode": {
                      "description": "ICMPCode defines the ICMP code to filter flows by.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "icmpType": {
                      "description": "ICMPType defines the ICMP type to filter flows by.",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "peerIP": {
                      "description": "PeerIP defines the IP address to filter flows by.\nExample: 10.10.10.10",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "ports": {
                      "description": "Ports defines the ports to filter flows by. it can be user for either source or destination ports.\nTo filter a single port, set a single port as an integer value. For example ports: 80.\nTo filter a range of ports, use a \"start-end\" range, string format. For example ports: \"80-10",
                      "x-kubernetes-int-or-string": true
                    },
                    "protocol": {
                      "description": "Protocol defines the protocol to filter flows by.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "TCP",
                        "UDP",
                        "ICMP",
                        "ICMPv6",
                        "SCTP"
                      ]
                    },
                    "sourcePorts": {
                      "description": "SourcePorts defines the source ports to filter flows by.\nTo filter a single port, set a single port as an integer value. For example sourcePorts: 80.\nTo filter a range of ports, use a \"start-end\" range, string format. For example sourcePorts: \"80-100\".",
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "additionalProperties": false
                },
                "imagePullPolicy": {
                  "description": "`imagePullPolicy` is the Kubernetes pull policy for the image defined above",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "IfNotPresent",
                    "Always",
                    "Never"
                  ]
                },
                "interfaces": {
                  "description": "`interfaces` contains the interface names from where flows are collected. If empty, the agent\nfetches all the interfaces in the system, excepting the ones listed in ExcludeInterfaces.\nAn entry enclosed by slashes, such as `/br-/`, is matched as a regular expression.\nOtherwise it is matched as a case-sensitive string.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "kafkaBatchSize": {
                  "description": "`kafkaBatchSize` limits the maximum size of a request in bytes before being sent to a partition. Ignored when not using Kafka. Default: 1MB.",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "logLevel": {
                  "description": "`logLevel` defines the log level for the NetObserv eBPF Agent",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "trace",
                    "debug",
                    "info",
                    "warn",
                    "error",
                    "fatal",
                    "panic"
                  ]
                },
                "metrics": {
                  "description": "`metrics` defines the eBPF agent configuration regarding metrics",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "disableAlerts": {
                      "description": "`disableAlerts` is a list of alerts that should be disabled.\nPossible values are:<br>\n`NetObservDroppedFlows`, which is triggered when the eBPF agent is missing packets or flows, such as when the BPF hashmap is busy or full, or the capacity limiter being triggered.<br>",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "Name of an eBPF agent alert.\nPossible values are:<br>\n`NetObservDroppedFlows`, which is triggered when the eBPF agent is missing packets or flows, such as when the BPF hashmap is busy or full, or the capacity limiter being triggered.<br>",
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "NetObservDroppedFlows"
                        ]
                      }
                    },
                    "enable": {
                      "description": "Set `enable` to `false` to disable eBPF agent metrics collection, by default it's `true`.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "server": {
                      "description": "Metrics server endpoint configuration for Prometheus scraper",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "port": {
                          "description": "The prometheus HTTP port",
                          "type": [
                            "integer",
                            "null"
                          ],
                          "format": "int32",
                          "maximum": 65535,
                          "minimum": 1
                        },
                        "tls": {
                          "description": "TLS configuration.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "insecureSkipVerify": {
                              "description": "`insecureSkipVerify` allows skipping client-side verification of the provided certificate.\nIf set to `true`, the `providedCaFile` field is ignored.",
                              "type": [
                                "boolean",
                                "null"
                              ]
                            },
                            "provided": {
                              "description": "TLS configuration when `type` is set to `PROVIDED`.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "properties": {
                                "certFile": {
                                  "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "certKey": {
                                  "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "name": {
                                  "description": "Name of the config map or secret containing certificates",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "namespace": {
                                  "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "type": {
                                  "description": "Type for the certificate reference: `configmap` or `secret`",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "configmap",
                                    "secret"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            },
                            "providedCaFile": {
                              "description": "Reference to the CA file when `type` is set to `PROVIDED`.",
                              "type": [
                                "object",
                                "null"
                              ],
                              "properties": {
                                "file": {
                                  "description": "File name within the config map or secret",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "name": {
                                  "description": "Name of the config map or secret containing the file",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "namespace": {
                                  "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "type": {
                                  "description": "Type for the file reference: \"configmap\" or \"secret\"",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "configmap",
                                    "secret"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            },
                            "type": {
                              "description": "Select the type of TLS configuration:<br>\n- `DISABLED` (default) to not configure TLS for the endpoint.\n- `PROVIDED` to manually provide cert file and a key file. [Unsupported (*)].\n- `AUTO` to use OpenShift auto generated certificate using annotations.",
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "DISABLED",
                                "PROVIDED",
                                "AUTO"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "privileged": {
                  "description": "Privileged mode for the eBPF Agent container. When ignored or set to `false`, the operator sets\ngranular capabilities (BPF, PERFMON, NET_ADMIN, SYS_RESOURCE) to the container.\nIf for some reason these capabilities cannot be set, such as if an old kernel version not knowing CAP_BPF\nis in use, then you can turn on this mode for more global privileges.\nSome agent features require the privileged mode, such as packet drops tracking (see `features`) and SR-IOV support.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "resources": {
                  "description": "`resources` are the compute resources required by this container.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "sampling": {
                  "description": "Sampling rate of the flow reporter. 100 means one flow on 100 is sent. 0 or 1 means all flows are sampled.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "ipfix": {
              "description": "`ipfix` [deprecated (*)] - describes the settings related to the IPFIX-based flow reporter when `spec.agent.type`\nis set to `IPFIX`.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "cacheActiveTimeout": {
                  "description": "`cacheActiveTimeout` is the max period during which the reporter aggregates flows before sending.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^\\d+(ns|ms|s|m)?$"
                },
                "cacheMaxFlows": {
                  "description": "`cacheMaxFlows` is the max number of flows in an aggregate; when reached, the reporter sends the flows.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 0
                },
                "clusterNetworkOperator": {
                  "description": "`clusterNetworkOperator` defines the settings related to the OpenShift Cluster Network Operator, when available.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "namespace": {
                      "description": "Namespace  where the config map is going to be deployed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "forceSampleAll": {
                  "description": "`forceSampleAll` allows disabling sampling in the IPFIX-based flow reporter.\nIt is not recommended to sample all the traffic with IPFIX, as it might generate cluster instability.\nIf you REALLY want to do that, set this flag to `true`. Use at your own risk.\nWhen it is set to `true`, the value of `sampling` is ignored.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "ovnKubernetes": {
                  "description": "`ovnKubernetes` defines the settings of the OVN-Kubernetes CNI, when available. This configuration is used when using OVN's IPFIX exports, without OpenShift. When using OpenShift, refer to the `clusterNetworkOperator` property instead.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "containerName": {
                      "description": "`containerName` defines the name of the container to configure for IPFIX.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "daemonSetName": {
                      "description": "`daemonSetName` defines the name of the DaemonSet controlling the OVN-Kubernetes pods.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace where OVN-Kubernetes pods are deployed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "sampling": {
                  "description": "`sampling` is the sampling rate on the reporter. 100 means one flow on 100 is sent.\nTo ensure cluster stability, it is not possible to set a value below 2.\nIf you really want to sample every packet, which might impact the cluster stability,\nrefer to `forceSampleAll`. Alternatively, you can use the eBPF Agent instead of IPFIX.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 2
                }
              },
              "additionalProperties": false
            },
            "type": {
              "description": "`type` [deprecated (*)] selects the flows tracing agent. The only possible value is `EBPF` (default), to use NetObserv eBPF agent.<br>\nPreviously, using an IPFIX collector was allowed, but was deprecated and it is now removed.<br>\nSetting `IPFIX` is ignored and still use the eBPF Agent.\nSince there is only a single option here, this field will be remove in a future API version.",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "EBPF",
                "IPFIX"
              ]
            }
          },
          "additionalProperties": false
        },
        "consolePlugin": {
          "description": "`consolePlugin` defines the settings related to the OpenShift Console plugin, when available.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "autoscaler": {
              "description": "`autoscaler` spec of a horizontal pod autoscaler to set up for the plugin Deployment.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "maxReplicas": {
                  "description": "`maxReplicas` is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "metrics": {
                  "description": "Metrics used by the pod autoscaler. For documentation, refer to https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "containerResource": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "container",
                          "name",
                          "target"
                        ],
                        "properties": {
                          "container": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "external": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "metric": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "selector": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "object": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "describedObject",
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "describedObject": {
                            "type": "object",
                            "required": [
                              "kind",
                              "name"
                            ],
                            "properties": {
                              "apiVersion": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "kind": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "metric": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "selector": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "pods": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "metric": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "selector": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "resource": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "name",
                          "target"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "minReplicas": {
                  "description": "`minReplicas` is the lower limit for the number of replicas to which the autoscaler\ncan scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the\nalpha feature gate HPAScaleToZero is enabled and at least one Object or External\nmetric is configured. Scaling is active as long as at least one metric value is\navailable.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "status": {
                  "description": "`status` describes the desired status regarding deploying an horizontal pod autoscaler.<br>\n- `DISABLED` does not deploy an horizontal pod autoscaler.<br>\n- `ENABLED` deploys an horizontal pod autoscaler.<br>",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "DISABLED",
                    "ENABLED"
                  ]
                }
              },
              "additionalProperties": false
            },
            "enable": {
              "description": "Enables the console plugin deployment.\n`spec.loki.enable` must also be `true`",
              "type": [
                "boolean",
                "null"
              ]
            },
            "imagePullPolicy": {
              "description": "`imagePullPolicy` is the Kubernetes pull policy for the image defined above",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "IfNotPresent",
                "Always",
                "Never"
              ]
            },
            "logLevel": {
              "description": "`logLevel` for the console plugin backend",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "trace",
                "debug",
                "info",
                "warn",
                "error",
                "fatal",
                "panic"
              ]
            },
            "port": {
              "description": "`port` is the plugin service port. Do not use 9002, which is reserved for metrics.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "maximum": 65535,
              "minimum": 1
            },
            "portNaming": {
              "description": "`portNaming` defines the configuration of the port-to-service name translation",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "enable": {
                  "description": "Enable the console plugin port-to-service name translation",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "portNames": {
                  "description": "`portNames` defines additional port names to use in the console,\nfor example, `portNames: {\"3100\": \"loki\"}`.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "quickFilters": {
              "description": "`quickFilters` configures quick filter presets for the Console plugin",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "`QuickFilter` defines preset configuration for Console's quick filters",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "filter",
                  "name"
                ],
                "properties": {
                  "default": {
                    "description": "`default` defines whether this filter should be active by default or not",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "filter": {
                    "description": "`filter` is a set of keys and values to be set when this filter is selected. Each key can relate to a list of values using a coma-separated string,\nfor example, `filter: {\"src_namespace\": \"namespace1,namespace2\"}`.",
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "name": {
                    "description": "Name of the filter, that is displayed in the Console",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "register": {
              "description": "`register` allows, when set to `true`, to automatically register the provided console plugin with the OpenShift Console operator.\nWhen set to `false`, you can still register it manually by editing console.operator.openshift.io/cluster with the following command:\n`oc patch console.operator.openshift.io cluster --type='json' -p '[{\"op\": \"add\", \"path\": \"/spec/plugins/-\", \"value\": \"netobserv-plugin\"}]'`",
              "type": [
                "boolean",
                "null"
              ]
            },
            "replicas": {
              "description": "`replicas` defines the number of replicas (pods) to start.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "minimum": 0
            },
            "resources": {
              "description": "`resources`, in terms of compute resources, required by this container.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "deploymentModel": {
          "description": "`deploymentModel` defines the desired type of deployment for flow processing. Possible values are:<br>\n- `DIRECT` (default) to make the flow processor listening directly from the agents.<br>\n- `KAFKA` to make flows sent to a Kafka pipeline before consumption by the processor.<br>\nKafka can provide better scalability, resiliency, and high availability (for more details, see https://www.redhat.com/en/topics/integration/what-is-apache-kafka).",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "DIRECT",
            "KAFKA"
          ]
        },
        "exporters": {
          "description": "`exporters` define additional optional exporters for custom consumption or storage.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "`FlowCollectorExporter` defines an additional exporter to send enriched flows to.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "type"
            ],
            "properties": {
              "ipfix": {
                "description": "IPFIX configuration, such as the IP address and port to send enriched IPFIX flows to.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "targetHost",
                  "targetPort"
                ],
                "properties": {
                  "targetHost": {
                    "description": "Address of the IPFIX external receiver",
                    "type": "string"
                  },
                  "targetPort": {
                    "description": "Port for the IPFIX external receiver",
                    "type": "integer"
                  },
                  "transport": {
                    "description": "Transport protocol (`TCP` or `UDP`) to be used for the IPFIX connection, defaults to `TCP`.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "TCP",
                      "UDP"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "kafka": {
                "description": "Kafka configuration, such as the address and topic, to send enriched flows to.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "address",
                  "topic"
                ],
                "properties": {
                  "address": {
                    "description": "Address of the Kafka server",
                    "type": "string"
                  },
                  "sasl": {
                    "description": "SASL authentication configuration. [Unsupported (*)].",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "clientIDReference": {
                        "description": "Reference to the secret or config map containing the client ID",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "file": {
                            "description": "File name within the config map or secret",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the config map or secret containing the file",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type for the file reference: \"configmap\" or \"secret\"",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "configmap",
                              "secret"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "clientSecretReference": {
                        "description": "Reference to the secret or config map containing the client secret",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "file": {
                            "description": "File name within the config map or secret",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the config map or secret containing the file",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type for the file reference: \"configmap\" or \"secret\"",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "configmap",
                              "secret"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "type": {
                        "description": "Type of SASL authentication to use, or `DISABLED` if SASL is not used",
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "DISABLED",
                          "PLAIN",
                          "SCRAM-SHA512"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "tls": {
                    "description": "TLS client configuration. When using TLS, verify that the address matches the Kafka port used for TLS, generally 9093.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "caCert": {
                        "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "certFile": {
                            "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "certKey": {
                            "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the config map or secret containing certificates",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type for the certificate reference: `configmap` or `secret`",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "configmap",
                              "secret"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "enable": {
                        "description": "Enable TLS",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "insecureSkipVerify": {
                        "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate.\nIf set to `true`, the `caCert` field is ignored.",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "userCert": {
                        "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "certFile": {
                            "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "certKey": {
                            "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the config map or secret containing certificates",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type for the certificate reference: `configmap` or `secret`",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "configmap",
                              "secret"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "topic": {
                    "description": "Kafka topic to use. It must exist. NetObserv does not create it.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "type": {
                "description": "`type` selects the type of exporters. The available options are `KAFKA` and `IPFIX`.",
                "type": "string",
                "enum": [
                  "KAFKA",
                  "IPFIX"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "kafka": {
          "description": "Kafka configuration, allowing to use Kafka as a broker as part of the flow collection pipeline. Available when the `spec.deploymentModel` is `KAFKA`.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "address",
            "topic"
          ],
          "properties": {
            "address": {
              "description": "Address of the Kafka server",
              "type": "string"
            },
            "sasl": {
              "description": "SASL authentication configuration. [Unsupported (*)].",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "clientIDReference": {
                  "description": "Reference to the secret or config map containing the client ID",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "file": {
                      "description": "File name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing the file",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the file reference: \"configmap\" or \"secret\"",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "clientSecretReference": {
                  "description": "Reference to the secret or config map containing the client secret",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "file": {
                      "description": "File name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing the file",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the file reference: \"configmap\" or \"secret\"",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "Type of SASL authentication to use, or `DISABLED` if SASL is not used",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "DISABLED",
                    "PLAIN",
                    "SCRAM-SHA512"
                  ]
                }
              },
              "additionalProperties": false
            },
            "tls": {
              "description": "TLS client configuration. When using TLS, verify that the address matches the Kafka port used for TLS, generally 9093.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "caCert": {
                  "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "certFile": {
                      "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "certKey": {
                      "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing certificates",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the certificate reference: `configmap` or `secret`",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "enable": {
                  "description": "Enable TLS",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "insecureSkipVerify": {
                  "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate.\nIf set to `true`, the `caCert` field is ignored.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "userCert": {
                  "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "certFile": {
                      "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "certKey": {
                      "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing certificates",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the certificate reference: `configmap` or `secret`",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "topic": {
              "description": "Kafka topic to use. It must exist. NetObserv does not create it.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "loki": {
          "description": "`loki`, the flow store, client settings.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "authToken": {
              "description": "`authToken` describes the way to get a token to authenticate to Loki.<br>\n- `DISABLED` does not send any token with the request.<br>\n- `FORWARD` forwards the user token for authorization.<br>\n- `HOST` [deprecated (*)] - uses the local pod service account to authenticate to Loki.<br>\nWhen using the Loki Operator, this must be set to `FORWARD`.",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "DISABLED",
                "HOST",
                "FORWARD"
              ]
            },
            "batchSize": {
              "description": "`batchSize` is the maximum batch size (in bytes) of logs to accumulate before sending.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64",
              "minimum": 1
            },
            "batchWait": {
              "description": "`batchWait` is the maximum time to wait before sending a batch.",
              "type": [
                "string",
                "null"
              ]
            },
            "enable": {
              "description": "Set `enable` to `true` to store flows in Loki.\nThe Console plugin can use either Loki or Prometheus as a data source for metrics (see also `spec.prometheus.querier`), or both.\nNot all queries are transposable from Loki to Prometheus. Hence, if Loki is disabled, some features of the plugin are disabled as well,\nsuch as getting per-pod information or viewing raw flows.\nIf both Prometheus and Loki are enabled, Prometheus takes precedence and Loki is used as a fallback for queries that Prometheus cannot handle.\nIf they are both disabled, the Console plugin is not deployed.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "maxBackoff": {
              "description": "`maxBackoff` is the maximum backoff time for client connection between retries.",
              "type": [
                "string",
                "null"
              ]
            },
            "maxRetries": {
              "description": "`maxRetries` is the maximum number of retries for client connections.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "minimum": 0
            },
            "minBackoff": {
              "description": "`minBackoff` is the initial backoff time for client connection between retries.",
              "type": [
                "string",
                "null"
              ]
            },
            "querierUrl": {
              "description": "`querierURL` specifies the address of the Loki querier service, in case it is different from the\nLoki ingester URL. If empty, the URL value is used (assuming that the Loki ingester\nand querier are in the same server). When using the Loki Operator, do not set it, since\ningestion and queries use the Loki gateway.",
              "type": [
                "string",
                "null"
              ]
            },
            "readTimeout": {
              "description": "`readTimeout` is the maximum loki query total time limit.\nA timeout of zero means no timeout.",
              "type": [
                "string",
                "null"
              ]
            },
            "staticLabels": {
              "description": "`staticLabels` is a map of common labels to set on each flow.",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "statusTls": {
              "description": "TLS client configuration for Loki status URL.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "caCert": {
                  "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "certFile": {
                      "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "certKey": {
                      "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing certificates",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the certificate reference: `configmap` or `secret`",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "enable": {
                  "description": "Enable TLS",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "insecureSkipVerify": {
                  "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate.\nIf set to `true`, the `caCert` field is ignored.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "userCert": {
                  "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "certFile": {
                      "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "certKey": {
                      "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing certificates",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the certificate reference: `configmap` or `secret`",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "statusUrl": {
              "description": "`statusURL` specifies the address of the Loki `/ready`, `/metrics` and `/config` endpoints, in case it is different from the\nLoki querier URL. If empty, the `querierURL` value is used.\nThis is useful to show error messages and some context in the frontend.\nWhen using the Loki Operator, set it to the Loki HTTP query frontend service, for example\nhttps://loki-query-frontend-http.netobserv.svc:3100/.\n`statusTLS` configuration is used when `statusUrl` is set.",
              "type": [
                "string",
                "null"
              ]
            },
            "tenantID": {
              "description": "`tenantID` is the Loki `X-Scope-OrgID` that identifies the tenant for each request.\nWhen using the Loki Operator, set it to `network`, which corresponds to a special tenant mode.",
              "type": [
                "string",
                "null"
              ]
            },
            "timeout": {
              "description": "`timeout` is the maximum processor time connection / request limit.\nA timeout of zero means no timeout.",
              "type": [
                "string",
                "null"
              ]
            },
            "tls": {
              "description": "TLS client configuration for Loki URL.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "caCert": {
                  "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "certFile": {
                      "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "certKey": {
                      "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing certificates",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the certificate reference: `configmap` or `secret`",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "enable": {
                  "description": "Enable TLS",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "insecureSkipVerify": {
                  "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate.\nIf set to `true`, the `caCert` field is ignored.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "userCert": {
                  "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "certFile": {
                      "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "certKey": {
                      "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing certificates",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the certificate reference: `configmap` or `secret`",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "url": {
              "description": "`url` is the address of an existing Loki service to push the flows to. When using the Loki Operator,\nset it to the Loki gateway service with the `network` tenant set in path, for example\nhttps://loki-gateway-http.netobserv.svc:8080/api/logs/v1/network.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "namespace": {
          "description": "Namespace where NetObserv pods are deployed.",
          "type": [
            "string",
            "null"
          ]
        },
        "processor": {
          "description": "`processor` defines the settings of the component that receives the flows from the agent,\nenriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "addZone": {
              "description": "`addZone` allows availability zone awareness by labelling flows with their source and destination zones.\nThis feature requires the \"topology.kubernetes.io/zone\" label to be set on nodes.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "clusterName": {
              "description": "`clusterName` is the name of the cluster to appear in the flows data. This is useful in a multi-cluster context. When using OpenShift, leave empty to make it automatically determined.",
              "type": [
                "string",
                "null"
              ]
            },
            "conversationEndTimeout": {
              "description": "`conversationEndTimeout` is the time to wait after a network flow is received, to consider the conversation ended.\nThis delay is ignored when a FIN packet is collected for TCP flows (see `conversationTerminatingTimeout` instead).",
              "type": [
                "string",
                "null"
              ]
            },
            "conversationHeartbeatInterval": {
              "description": "`conversationHeartbeatInterval` is the time to wait between \"tick\" events of a conversation",
              "type": [
                "string",
                "null"
              ]
            },
            "conversationTerminatingTimeout": {
              "description": "`conversationTerminatingTimeout` is the time to wait from detected FIN flag to end a conversation. Only relevant for TCP flows.",
              "type": [
                "string",
                "null"
              ]
            },
            "debug": {
              "description": "`debug` allows setting some aspects of the internal configuration of the flow processor.\nThis section is aimed exclusively for debugging and fine-grained performance optimizations,\nsuch as `GOGC` and `GOMAXPROCS` env vars. Set these values at your own risk.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "env": {
                  "description": "`env` allows passing custom environment variables to underlying components. Useful for passing\nsome very concrete performance-tuning options, such as `GOGC` and `GOMAXPROCS`, that should not be\npublicly exposed as part of the FlowCollector descriptor, as they are only useful\nin edge debug or support scenarios.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "dropUnusedFields": {
              "description": "`dropUnusedFields` [deprecated (*)] this setting is not used anymore.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "enableKubeProbes": {
              "description": "`enableKubeProbes` is a flag to enable or disable Kubernetes liveness and readiness probes",
              "type": [
                "boolean",
                "null"
              ]
            },
            "healthPort": {
              "description": "`healthPort` is a collector HTTP port in the Pod that exposes the health check API",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "maximum": 65535,
              "minimum": 1
            },
            "imagePullPolicy": {
              "description": "`imagePullPolicy` is the Kubernetes pull policy for the image defined above",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "IfNotPresent",
                "Always",
                "Never"
              ]
            },
            "kafkaConsumerAutoscaler": {
              "description": "`kafkaConsumerAutoscaler` is the spec of a horizontal pod autoscaler to set up for `flowlogs-pipeline-transformer`, which consumes Kafka messages.\nThis setting is ignored when Kafka is disabled.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "maxReplicas": {
                  "description": "`maxReplicas` is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "metrics": {
                  "description": "Metrics used by the pod autoscaler. For documentation, refer to https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "containerResource": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "container",
                          "name",
                          "target"
                        ],
                        "properties": {
                          "container": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "external": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "metric": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "selector": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "object": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "describedObject",
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "describedObject": {
                            "type": "object",
                            "required": [
                              "kind",
                              "name"
                            ],
                            "properties": {
                              "apiVersion": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "kind": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "metric": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "selector": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "pods": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "metric": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "selector": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "type": "string"
                                        },
                                        "operator": {
                                          "type": "string"
                                        },
                                        "values": {
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "x-kubernetes-list-type": "atomic"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "x-kubernetes-list-type": "atomic"
                                  },
                                  "matchLabels": {
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "x-kubernetes-map-type": "atomic",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "resource": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "name",
                          "target"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "target": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "type": "string"
                              },
                              "value": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "minReplicas": {
                  "description": "`minReplicas` is the lower limit for the number of replicas to which the autoscaler\ncan scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the\nalpha feature gate HPAScaleToZero is enabled and at least one Object or External\nmetric is configured. Scaling is active as long as at least one metric value is\navailable.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "status": {
                  "description": "`status` describes the desired status regarding deploying an horizontal pod autoscaler.<br>\n- `DISABLED` does not deploy an horizontal pod autoscaler.<br>\n- `ENABLED` deploys an horizontal pod autoscaler.<br>",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "DISABLED",
                    "ENABLED"
                  ]
                }
              },
              "additionalProperties": false
            },
            "kafkaConsumerBatchSize": {
              "description": "`kafkaConsumerBatchSize` indicates to the broker the maximum batch size, in bytes, that the consumer accepts. Ignored when not using Kafka. Default: 10MB.",
              "type": [
                "integer",
                "null"
              ]
            },
            "kafkaConsumerQueueCapacity": {
              "description": "`kafkaConsumerQueueCapacity` defines the capacity of the internal message queue used in the Kafka consumer client. Ignored when not using Kafka.",
              "type": [
                "integer",
                "null"
              ]
            },
            "kafkaConsumerReplicas": {
              "description": "`kafkaConsumerReplicas` defines the number of replicas (pods) to start for `flowlogs-pipeline-transformer`, which consumes Kafka messages.\nThis setting is ignored when Kafka is disabled.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "minimum": 0
            },
            "logLevel": {
              "description": "`logLevel` of the processor runtime",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "trace",
                "debug",
                "info",
                "warn",
                "error",
                "fatal",
                "panic"
              ]
            },
            "logTypes": {
              "description": "`logTypes` defines the desired record types to generate. Possible values are:<br>\n- `FLOWS` (default) to export regular network flows<br>\n- `CONVERSATIONS` to generate events for started conversations, ended conversations as well as periodic \"tick\" updates<br>\n- `ENDED_CONVERSATIONS` to generate only ended conversations events<br>\n- `ALL` to generate both network flows and all conversations events<br>",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "FLOWS",
                "CONVERSATIONS",
                "ENDED_CONVERSATIONS",
                "ALL"
              ]
            },
            "metrics": {
              "description": "`Metrics` define the processor configuration regarding metrics",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "disableAlerts": {
                  "description": "`disableAlerts` is a list of alerts that should be disabled.\nPossible values are:<br>\n`NetObservNoFlows`, which is triggered when no flows are being observed for a certain period.<br>\n`NetObservLokiError`, which is triggered when flows are being dropped due to Loki errors.<br>",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Name of a processor alert.\nPossible values are:<br>\n- `NetObservNoFlows`, which is triggered when no flows are being observed for a certain period.<br>\n- `NetObservLokiError`, which is triggered when flows are being dropped due to Loki errors.<br>",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "NetObservNoFlows",
                      "NetObservLokiError"
                    ]
                  }
                },
                "ignoreTags": {
                  "description": "`ignoreTags` [deprecated (*)] is a list of tags to specify which metrics to ignore. Each metric is associated with a list of tags. More details in https://github.com/netobserv/network-observability-operator/tree/main/controllers/flowlogspipeline/metrics_definitions .\nAvailable tags are: `egress`, `ingress`, `flows`, `bytes`, `packets`, `namespaces`, `nodes`, `workloads`, `nodes-flows`, `namespaces-flows`, `workloads-flows`.\nNamespace-based metrics are covered by both `workloads` and `namespaces` tags, hence it is recommended to always ignore one of them (`workloads` offering a finer granularity).<br>\nDeprecation notice: use `includeList` instead.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "includeList": {
                  "description": "`includeList` is a list of metric names to specify which ones to generate.\nThe names correspond to the names in Prometheus without the prefix. For example,\n`namespace_egress_packets_total` will show up as `netobserv_namespace_egress_packets_total` in Prometheus.\nNote that the more metrics you add, the bigger is the impact on Prometheus workload resources.\nMetrics enabled by default are:\n`namespace_flows_total`, `node_ingress_bytes_total`, `workload_ingress_bytes_total`, `namespace_drop_packets_total` (when `PacketDrop` feature is enabled),\n`namespace_rtt_seconds` (when `FlowRTT` feature is enabled), `namespace_dns_latency_seconds` (when `DNSTracking` feature is enabled).\nMore information, with full list of available metrics: https://github.com/netobserv/network-observability-operator/blob/main/docs/Metrics.md",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Metric name. More information in https://github.com/netobserv/network-observability-operator/blob/main/docs/Metrics.md.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "namespace_egress_bytes_total",
                      "namespace_egress_packets_total",
                      "namespace_ingress_bytes_total",
                      "namespace_ingress_packets_total",
                      "namespace_flows_total",
                      "node_egress_bytes_total",
                      "node_egress_packets_total",
                      "node_ingress_bytes_total",
                      "node_ingress_packets_total",
                      "node_flows_total",
                      "workload_egress_bytes_total",
                      "workload_egress_packets_total",
                      "workload_ingress_bytes_total",
                      "workload_ingress_packets_total",
                      "workload_flows_total",
                      "namespace_drop_bytes_total",
                      "namespace_drop_packets_total",
                      "node_drop_bytes_total",
                      "node_drop_packets_total",
                      "workload_drop_bytes_total",
                      "workload_drop_packets_total",
                      "namespace_rtt_seconds",
                      "node_rtt_seconds",
                      "workload_rtt_seconds",
                      "namespace_dns_latency_seconds",
                      "node_dns_latency_seconds",
                      "workload_dns_latency_seconds"
                    ]
                  }
                },
                "server": {
                  "description": "Metrics server endpoint configuration for Prometheus scraper",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "port": {
                      "description": "The prometheus HTTP port",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int32",
                      "maximum": 65535,
                      "minimum": 1
                    },
                    "tls": {
                      "description": "TLS configuration.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "insecureSkipVerify": {
                          "description": "`insecureSkipVerify` allows skipping client-side verification of the provided certificate.\nIf set to `true`, the `providedCaFile` field is ignored.",
                          "type": [
                            "boolean",
                            "null"
                          ]
                        },
                        "provided": {
                          "description": "TLS configuration when `type` is set to `PROVIDED`.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "certFile": {
                              "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "certKey": {
                              "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name of the config map or secret containing certificates",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": {
                              "description": "Type for the certificate reference: `configmap` or `secret`",
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "configmap",
                                "secret"
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "providedCaFile": {
                          "description": "Reference to the CA file when `type` is set to `PROVIDED`.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "file": {
                              "description": "File name within the config map or secret",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name of the config map or secret containing the file",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": {
                              "description": "Type for the file reference: \"configmap\" or \"secret\"",
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "configmap",
                                "secret"
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "description": "Select the type of TLS configuration:<br>\n- `DISABLED` (default) to not configure TLS for the endpoint.\n- `PROVIDED` to manually provide cert file and a key file. [Unsupported (*)].\n- `AUTO` to use OpenShift auto generated certificate using annotations.",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "DISABLED",
                            "PROVIDED",
                            "AUTO"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "multiClusterDeployment": {
              "description": "Set `multiClusterDeployment` to `true` to enable multi clusters feature. This adds clusterName label to flows data",
              "type": [
                "boolean",
                "null"
              ]
            },
            "port": {
              "description": "Port of the flow collector (host port).\nBy convention, some values are forbidden. It must be greater than 1024 and different from\n4500, 4789 and 6081.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "maximum": 65535,
              "minimum": 1025
            },
            "profilePort": {
              "description": "`profilePort` allows setting up a Go pprof profiler listening to this port",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "maximum": 65535,
              "minimum": 0
            },
            "resources": {
              "description": "`resources` are the compute resources required by this container.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false
            },
            "subnetLabels": {
              "description": "`subnetLabels` allows to define custom labels on subnets and IPs or to enable automatic labelling of recognized subnets in OpenShift.\nWhen a subnet matches the source or destination IP of a flow, a corresponding field is added: `SrcSubnetLabel` or `DstSubnetLabel`.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "customLabels": {
                  "description": "`customLabels` allows to customize subnets and IPs labelling, such as to identify cluster-external workloads or web services.\nIf you enable `openShiftAutoDetect`, `customLabels` can override the detected subnets in case they overlap.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "SubnetLabel allows to label subnets and IPs, such as to identify cluster-external workloads or web services.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "cidrs": {
                        "description": "List of CIDRs, such as `[\"1.2.3.4/32\"]`.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "name": {
                        "description": "Label name, used to flag matching flows.",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "openShiftAutoDetect": {
                  "description": "`openShiftAutoDetect` allows, when set to `true`, to detect automatically the machines, pods and services subnets based on the\nOpenShift install configuration and the Cluster Network Operator configuration. Indirectly, this is a way to accurately detect\nexternal traffic: flows that are not labeled for those subnets are external to the cluster. Enabled by default on OpenShift.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "prometheus": {
          "description": "`prometheus` defines Prometheus settings, such as querier configuration used to fetch metrics from the Console plugin.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "querier": {
              "description": "Prometheus querying configuration, such as client settings, used in the Console plugin.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "enable": {
                  "description": "Set `enable` to `true` to make the Console plugin querying flow metrics from Prometheus instead of Loki whenever possible.\nThe Console plugin can use either Loki or Prometheus as a data source for metrics (see also `spec.loki`), or both.\nNot all queries are transposable from Loki to Prometheus. Hence, if Loki is disabled, some features of the plugin are disabled as well,\nsuch as getting per-pod information or viewing raw flows.\nIf both Prometheus and Loki are enabled, Prometheus takes precedence and Loki is used as a fallback for queries that Prometheus cannot handle.\nIf they are both disabled, the Console plugin is not deployed.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "manual": {
                  "description": "Prometheus configuration for `Manual` mode.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "forwardUserToken": {
                      "description": "Set `true` to forward logged in user token in queries to Prometheus",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "tls": {
                      "description": "TLS client configuration for Prometheus URL.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "caCert": {
                          "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "certFile": {
                              "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "certKey": {
                              "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name of the config map or secret containing certificates",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": {
                              "description": "Type for the certificate reference: `configmap` or `secret`",
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "configmap",
                                "secret"
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "enable": {
                          "description": "Enable TLS",
                          "type": [
                            "boolean",
                            "null"
                          ]
                        },
                        "insecureSkipVerify": {
                          "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate.\nIf set to `true`, the `caCert` field is ignored.",
                          "type": [
                            "boolean",
                            "null"
                          ]
                        },
                        "userCert": {
                          "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "certFile": {
                              "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "certKey": {
                              "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name of the config map or secret containing certificates",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed.\nIf the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": {
                              "description": "Type for the certificate reference: `configmap` or `secret`",
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "configmap",
                                "secret"
                              ]
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "url": {
                      "description": "`url` is the address of an existing Prometheus service to use for querying metrics.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "mode": {
                  "description": "`mode` must be set according to the type of Prometheus installation that stores NetObserv metrics:<br>\n- Use `Auto` to try configuring automatically. In OpenShift, it uses the Thanos querier from OpenShift Cluster Monitoring<br>\n- Use `Manual` for a manual setup<br>",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "Manual",
                    "Auto"
                  ]
                },
                "timeout": {
                  "description": "`timeout` is the read timeout for console plugin queries to Prometheus.\nA timeout of zero means no timeout.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "`FlowCollectorStatus` defines the observed state of FlowCollector",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "`conditions` represent the latest available observations of an object's state",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "namespace": {
          "description": "Namespace where console plugin and flowlogs-pipeline have been deployed.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "flows.netobserv.io",
      "kind": "FlowCollector",
      "version": "v1beta1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}