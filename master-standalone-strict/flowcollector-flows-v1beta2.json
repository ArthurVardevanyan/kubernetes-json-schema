{
  "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "flows.netobserv.io/v1beta2"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "FlowCollector"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Defines the desired state of the FlowCollector resource. <br><br> *: the mention of \"unsupported\", or \"deprecated\" for a feature throughout this document means that this feature is not officially supported by Red Hat. It might have been, for example, contributed by the community and accepted without a formal agreement for maintenance. The product maintainers might provide some support for these features as a best effort only.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "agent": {
          "description": "Agent configuration for flows extraction.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "ebpf": {
              "description": "`ebpf` describes the settings related to the eBPF-based flow reporter when `spec.agent.type` is set to `eBPF`.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "advanced": {
                  "description": "`advanced` allows setting some aspects of the internal configuration of the eBPF agent. This section is aimed mostly for debugging and fine-grained performance optimizations, such as `GOGC` and `GOMAXPROCS` env vars. Set these values at your own risk.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "env": {
                      "description": "`env` allows passing custom environment variables to underlying components. Useful for passing some very concrete performance-tuning options, such as `GOGC` and `GOMAXPROCS`, that should not be publicly exposed as part of the FlowCollector descriptor, as they are only useful in edge debug or support scenarios.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "cacheActiveTimeout": {
                  "description": "`cacheActiveTimeout` is the max period during which the reporter aggregates flows before sending. Increasing `cacheMaxFlows` and `cacheActiveTimeout` can decrease the network traffic overhead and the CPU load, however you can expect higher memory consumption and an increased latency in the flow collection.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^\\d+(ns|ms|s|m)?$"
                },
                "cacheMaxFlows": {
                  "description": "`cacheMaxFlows` is the max number of flows in an aggregate; when reached, the reporter sends the flows. Increasing `cacheMaxFlows` and `cacheActiveTimeout` can decrease the network traffic overhead and the CPU load, however you can expect higher memory consumption and an increased latency in the flow collection.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 1
                },
                "excludeInterfaces": {
                  "description": "`excludeInterfaces` contains the interface names that are excluded from flow tracing. An entry enclosed by slashes, such as `/br-/`, is matched as a regular expression. Otherwise it is matched as a case-sensitive string.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "features": {
                  "description": "List of additional features to enable. They are all disabled by default. Enabling additional features might have performance impacts. Possible values are:<br> - `PacketDrop`: enable the packets drop flows logging feature. This feature requires mounting the kernel debug filesystem, so the eBPF pod has to run as privileged. If the `spec.agent.ebpf.privileged` parameter is not set, an error is reported.<br> - `DNSTracking`: enable the DNS tracking feature.<br> - `FlowRTT`: enable flow latency (RTT) calculations in the eBPF agent during TCP handshakes. This feature better works with `sampling` set to 1.<br>",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Agent feature, can be one of:<br> - `PacketDrop`, to track packet drops.<br> - `DNSTracking`, to track specific information on DNS traffic.<br> - `FlowRTT`, to track TCP latency.<br>",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "PacketDrop",
                      "DNSTracking",
                      "FlowRTT"
                    ]
                  }
                },
                "imagePullPolicy": {
                  "description": "`imagePullPolicy` is the Kubernetes pull policy for the image defined above",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "IfNotPresent",
                    "Always",
                    "Never"
                  ]
                },
                "interfaces": {
                  "description": "`interfaces` contains the interface names from where flows are collected. If empty, the agent fetches all the interfaces in the system, excepting the ones listed in ExcludeInterfaces. An entry enclosed by slashes, such as `/br-/`, is matched as a regular expression. Otherwise it is matched as a case-sensitive string.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "kafkaBatchSize": {
                  "description": "`kafkaBatchSize` limits the maximum size of a request in bytes before being sent to a partition. Ignored when not using Kafka. Default: 1MB.",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "logLevel": {
                  "description": "`logLevel` defines the log level for the NetObserv eBPF Agent",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "trace",
                    "debug",
                    "info",
                    "warn",
                    "error",
                    "fatal",
                    "panic"
                  ]
                },
                "privileged": {
                  "description": "Privileged mode for the eBPF Agent container. When ignored or set to `false`, the operator sets granular capabilities (BPF, PERFMON, NET_ADMIN, SYS_RESOURCE) to the container. If for some reason these capabilities cannot be set, such as if an old kernel version not knowing CAP_BPF is in use, then you can turn on this mode for more global privileges. Some agent features require the privileged mode, such as packet drops tracking (see `features`) and SR-IOV support.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "resources": {
                  "description": "`resources` are the compute resources required by this container. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "sampling": {
                  "description": "Sampling rate of the flow reporter. 100 means one flow on 100 is sent. 0 or 1 means all flows are sampled.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "ipfix": {
              "description": "`ipfix` [deprecated (*)] - describes the settings related to the IPFIX-based flow reporter when `spec.agent.type` is set to `IPFIX`.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "cacheActiveTimeout": {
                  "description": "`cacheActiveTimeout` is the max period during which the reporter aggregates flows before sending.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^\\d+(ns|ms|s|m)?$"
                },
                "cacheMaxFlows": {
                  "description": "`cacheMaxFlows` is the max number of flows in an aggregate; when reached, the reporter sends the flows.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 0
                },
                "clusterNetworkOperator": {
                  "description": "`clusterNetworkOperator` defines the settings related to the OpenShift Cluster Network Operator, when available.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "namespace": {
                      "description": "Namespace  where the config map is going to be deployed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "forceSampleAll": {
                  "description": "`forceSampleAll` allows disabling sampling in the IPFIX-based flow reporter. It is not recommended to sample all the traffic with IPFIX, as it might generate cluster instability. If you REALLY want to do that, set this flag to `true`. Use at your own risk. When it is set to `true`, the value of `sampling` is ignored.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "ovnKubernetes": {
                  "description": "`ovnKubernetes` defines the settings of the OVN-Kubernetes CNI, when available. This configuration is used when using OVN's IPFIX exports, without OpenShift. When using OpenShift, refer to the `clusterNetworkOperator` property instead.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "containerName": {
                      "description": "`containerName` defines the name of the container to configure for IPFIX.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "daemonSetName": {
                      "description": "`daemonSetName` defines the name of the DaemonSet controlling the OVN-Kubernetes pods.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace where OVN-Kubernetes pods are deployed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "sampling": {
                  "description": "`sampling` is the sampling rate on the reporter. 100 means one flow on 100 is sent. To ensure cluster stability, it is not possible to set a value below 2. If you really want to sample every packet, which might impact the cluster stability, refer to `forceSampleAll`. Alternatively, you can use the eBPF Agent instead of IPFIX.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 2
                }
              },
              "additionalProperties": false
            },
            "type": {
              "description": "`type` selects the flows tracing agent. Possible values are:<br> - `eBPF` (default) to use NetObserv eBPF agent.<br> - `IPFIX` [deprecated (*)] - to use the legacy IPFIX collector.<br> `eBPF` is recommended as it offers better performances and should work regardless of the CNI installed on the cluster. `IPFIX` works with OVN-Kubernetes CNI (other CNIs could work if they support exporting IPFIX, but they would require manual configuration).",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "eBPF",
                "IPFIX"
              ]
            }
          },
          "additionalProperties": false
        },
        "consolePlugin": {
          "description": "`consolePlugin` defines the settings related to the OpenShift Console plugin, when available.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "advanced": {
              "description": "`advanced` allows setting some aspects of the internal configuration of the console plugin. This section is aimed mostly for debugging and fine-grained performance optimizations, such as `GOGC` and `GOMAXPROCS` env vars. Set these values at your own risk.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "args": {
                  "description": "`args` allows passing custom arguments to underlying components. Useful for overriding some parameters, such as an url or a configuration path, that should not be publicly exposed as part of the FlowCollector descriptor, as they are only useful in edge debug or support scenarios.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "env": {
                  "description": "`env` allows passing custom environment variables to underlying components. Useful for passing some very concrete performance-tuning options, such as `GOGC` and `GOMAXPROCS`, that should not be publicly exposed as part of the FlowCollector descriptor, as they are only useful in edge debug or support scenarios.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "port": {
                  "description": "`port` is the plugin service port. Do not use 9002, which is reserved for metrics.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 1
                },
                "register": {
                  "description": "`register` allows, when set to `true`, to automatically register the provided console plugin with the OpenShift Console operator. When set to `false`, you can still register it manually by editing console.operator.openshift.io/cluster with the following command: `oc patch console.operator.openshift.io cluster --type='json' -p '[{\"op\": \"add\", \"path\": \"/spec/plugins/-\", \"value\": \"netobserv-plugin\"}]'`",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            },
            "autoscaler": {
              "description": "`autoscaler` spec of a horizontal pod autoscaler to set up for the plugin Deployment.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "maxReplicas": {
                  "description": "`maxReplicas` is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "metrics": {
                  "description": "Metrics used by the pod autoscaler",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "containerResource": {
                        "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "container",
                          "name",
                          "target"
                        ],
                        "properties": {
                          "container": {
                            "description": "container is the name of the container in the pods of the scaling target",
                            "type": "string"
                          },
                          "name": {
                            "description": "name is the name of the resource in question.",
                            "type": "string"
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "external": {
                        "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "metric": {
                            "description": "metric identifies the target metric by name and selector",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "name is the name of the given metric",
                                "type": "string"
                              },
                              "selector": {
                                "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "object": {
                        "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "describedObject",
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "describedObject": {
                            "description": "describedObject specifies the descriptions of a object,such as kind,name apiVersion",
                            "type": "object",
                            "required": [
                              "kind",
                              "name"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "apiVersion is the API version of the referent",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "kind": {
                                "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "metric": {
                            "description": "metric identifies the target metric by name and selector",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "name is the name of the given metric",
                                "type": "string"
                              },
                              "selector": {
                                "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "pods": {
                        "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "metric": {
                            "description": "metric identifies the target metric by name and selector",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "name is the name of the given metric",
                                "type": "string"
                              },
                              "selector": {
                                "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "resource": {
                        "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "name",
                          "target"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the name of the resource in question.",
                            "type": "string"
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "type": {
                        "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "minReplicas": {
                  "description": "`minReplicas` is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "status": {
                  "description": "`status` describes the desired status regarding deploying an horizontal pod autoscaler.<br> - `Disabled` does not deploy an horizontal pod autoscaler.<br> - `Enabled` deploys an horizontal pod autoscaler.<br>",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "Disabled",
                    "Enabled"
                  ]
                }
              },
              "additionalProperties": false
            },
            "enable": {
              "description": "Enables the console plugin deployment. `spec.loki.enable` must also be `true`",
              "type": [
                "boolean",
                "null"
              ]
            },
            "imagePullPolicy": {
              "description": "`imagePullPolicy` is the Kubernetes pull policy for the image defined above",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "IfNotPresent",
                "Always",
                "Never"
              ]
            },
            "logLevel": {
              "description": "`logLevel` for the console plugin backend",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "trace",
                "debug",
                "info",
                "warn",
                "error",
                "fatal",
                "panic"
              ]
            },
            "portNaming": {
              "description": "`portNaming` defines the configuration of the port-to-service name translation",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "enable": {
                  "description": "Enable the console plugin port-to-service name translation",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "portNames": {
                  "description": "`portNames` defines additional port names to use in the console, for example, `portNames: {\"3100\": \"loki\"}`.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "quickFilters": {
              "description": "`quickFilters` configures quick filter presets for the Console plugin",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "`QuickFilter` defines preset configuration for Console's quick filters",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "filter",
                  "name"
                ],
                "properties": {
                  "default": {
                    "description": "`default` defines whether this filter should be active by default or not",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "filter": {
                    "description": "`filter` is a set of keys and values to be set when this filter is selected. Each key can relate to a list of values using a coma-separated string, for example, `filter: {\"src_namespace\": \"namespace1,namespace2\"}`.",
                    "type": "object",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "name": {
                    "description": "Name of the filter, that is displayed in the Console",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "replicas": {
              "description": "`replicas` defines the number of replicas (pods) to start.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "minimum": 0
            },
            "resources": {
              "description": "`resources`, in terms of compute resources, required by this container. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "deploymentModel": {
          "description": "`deploymentModel` defines the desired type of deployment for flow processing. Possible values are:<br> - `Direct` (default) to make the flow processor listening directly from the agents.<br> - `Kafka` to make flows sent to a Kafka pipeline before consumption by the processor.<br> Kafka can provide better scalability, resiliency, and high availability (for more details, see https://www.redhat.com/en/topics/integration/what-is-apache-kafka).",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "Direct",
            "Kafka"
          ]
        },
        "exporters": {
          "description": "`exporters` define additional optional exporters for custom consumption or storage.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "`FlowCollectorExporter` defines an additional exporter to send enriched flows to.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "type"
            ],
            "properties": {
              "ipfix": {
                "description": "IPFIX configuration, such as the IP address and port to send enriched IPFIX flows to.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "targetHost",
                  "targetPort"
                ],
                "properties": {
                  "targetHost": {
                    "description": "Address of the IPFIX external receiver",
                    "type": "string"
                  },
                  "targetPort": {
                    "description": "Port for the IPFIX external receiver",
                    "type": "integer"
                  },
                  "transport": {
                    "description": "Transport protocol (`TCP` or `UDP`) to be used for the IPFIX connection, defaults to `TCP`.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "TCP",
                      "UDP"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "kafka": {
                "description": "Kafka configuration, such as the address and topic, to send enriched flows to.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "address",
                  "topic"
                ],
                "properties": {
                  "address": {
                    "description": "Address of the Kafka server",
                    "type": "string"
                  },
                  "sasl": {
                    "description": "SASL authentication configuration. [Unsupported (*)].",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "clientIDReference": {
                        "description": "Reference to the secret or config map containing the client ID",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "file": {
                            "description": "File name within the config map or secret",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the config map or secret containing the file",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type for the file reference: \"configmap\" or \"secret\"",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "configmap",
                              "secret"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "clientSecretReference": {
                        "description": "Reference to the secret or config map containing the client secret",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "file": {
                            "description": "File name within the config map or secret",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the config map or secret containing the file",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type for the file reference: \"configmap\" or \"secret\"",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "configmap",
                              "secret"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "type": {
                        "description": "Type of SASL authentication to use, or `Disabled` if SASL is not used",
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "Disabled",
                          "Plain",
                          "ScramSHA512"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "tls": {
                    "description": "TLS client configuration. When using TLS, verify that the address matches the Kafka port used for TLS, generally 9093.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "caCert": {
                        "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "certFile": {
                            "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "certKey": {
                            "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the config map or secret containing certificates",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type for the certificate reference: `configmap` or `secret`",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "configmap",
                              "secret"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "enable": {
                        "description": "Enable TLS",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "insecureSkipVerify": {
                        "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate. If set to `true`, the `caCert` field is ignored.",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "userCert": {
                        "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "certFile": {
                            "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "certKey": {
                            "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "name": {
                            "description": "Name of the config map or secret containing certificates",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "namespace": {
                            "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type for the certificate reference: `configmap` or `secret`",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "configmap",
                              "secret"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "topic": {
                    "description": "Kafka topic to use. It must exist. NetObserv does not create it.",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "type": {
                "description": "`type` selects the type of exporters. The available options are `Kafka` and `IPFIX`.",
                "type": "string",
                "enum": [
                  "Kafka",
                  "IPFIX"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "kafka": {
          "description": "Kafka configuration, allowing to use Kafka as a broker as part of the flow collection pipeline. Available when the `spec.deploymentModel` is `Kafka`.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "address",
            "topic"
          ],
          "properties": {
            "address": {
              "description": "Address of the Kafka server",
              "type": "string"
            },
            "sasl": {
              "description": "SASL authentication configuration. [Unsupported (*)].",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "clientIDReference": {
                  "description": "Reference to the secret or config map containing the client ID",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "file": {
                      "description": "File name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing the file",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the file reference: \"configmap\" or \"secret\"",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "clientSecretReference": {
                  "description": "Reference to the secret or config map containing the client secret",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "file": {
                      "description": "File name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing the file",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the file reference: \"configmap\" or \"secret\"",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "description": "Type of SASL authentication to use, or `Disabled` if SASL is not used",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "Disabled",
                    "Plain",
                    "ScramSHA512"
                  ]
                }
              },
              "additionalProperties": false
            },
            "tls": {
              "description": "TLS client configuration. When using TLS, verify that the address matches the Kafka port used for TLS, generally 9093.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "caCert": {
                  "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "certFile": {
                      "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "certKey": {
                      "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing certificates",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the certificate reference: `configmap` or `secret`",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "enable": {
                  "description": "Enable TLS",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "insecureSkipVerify": {
                  "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate. If set to `true`, the `caCert` field is ignored.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "userCert": {
                  "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "certFile": {
                      "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "certKey": {
                      "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of the config map or secret containing certificates",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "namespace": {
                      "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type for the certificate reference: `configmap` or `secret`",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "configmap",
                        "secret"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "topic": {
              "description": "Kafka topic to use. It must exist. NetObserv does not create it.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "loki": {
          "description": "`loki`, the flow store, client settings.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "advanced": {
              "description": "`advanced` allows setting some aspects of the internal configuration of the Loki clients. This section is aimed mostly for debugging and fine-grained performance optimizations.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "staticLabels": {
                  "description": "`staticLabels` is a map of common labels to set on each flow in Loki storage.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "writeMaxBackoff": {
                  "description": "`writeMaxBackoff` is the maximum backoff time for Loki client connection between retries.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "writeMaxRetries": {
                  "description": "`writeMaxRetries` is the maximum number of retries for Loki client connections.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 0
                },
                "writeMinBackoff": {
                  "description": "`writeMinBackoff` is the initial backoff time for Loki client connection between retries.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            },
            "enable": {
              "description": "Set `enable` to `true` to store flows in Loki. It is required for the OpenShift Console plugin installation.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "lokiStack": {
              "description": "Loki configuration for `LokiStack` mode. This is useful for an easy loki-operator configuration. It is ignored for other modes.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "name": {
                  "description": "Name of an existing LokiStack resource to use.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "Namespace where this `LokiStack` resource is located. If omited, it is assumed to be the same as `spec.namespace`.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            },
            "manual": {
              "description": "Loki configuration for `Manual` mode. This is the most flexible configuration. It is ignored for other modes.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "authToken": {
                  "description": "`authToken` describes the way to get a token to authenticate to Loki.<br> - `Disabled` does not send any token with the request.<br> - `Forward` forwards the user token for authorization.<br> - `Host` [deprecated (*)] - uses the local pod service account to authenticate to Loki.<br> When using the Loki Operator, this must be set to `Forward`.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "Disabled",
                    "Host",
                    "Forward"
                  ]
                },
                "ingesterUrl": {
                  "description": "`ingesterUrl` is the address of an existing Loki ingester service to push the flows to. When using the Loki Operator, set it to the Loki gateway service with the `network` tenant set in path, for example https://loki-gateway-http.netobserv.svc:8080/api/logs/v1/network.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "querierUrl": {
                  "description": "`querierUrl` specifies the address of the Loki querier service. When using the Loki Operator, set it to the Loki gateway service with the `network` tenant set in path, for example https://loki-gateway-http.netobserv.svc:8080/api/logs/v1/network.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "statusTls": {
                  "description": "TLS client configuration for Loki status URL.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "caCert": {
                      "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "certFile": {
                          "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "certKey": {
                          "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the config map or secret containing certificates",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": {
                          "description": "Type for the certificate reference: `configmap` or `secret`",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "configmap",
                            "secret"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "enable": {
                      "description": "Enable TLS",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "insecureSkipVerify": {
                      "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate. If set to `true`, the `caCert` field is ignored.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "userCert": {
                      "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "certFile": {
                          "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "certKey": {
                          "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the config map or secret containing certificates",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": {
                          "description": "Type for the certificate reference: `configmap` or `secret`",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "configmap",
                            "secret"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "statusUrl": {
                  "description": "`statusUrl` specifies the address of the Loki `/ready`, `/metrics` and `/config` endpoints, in case it is different from the Loki querier URL. If empty, the `querierUrl` value is used. This is useful to show error messages and some context in the frontend. When using the Loki Operator, set it to the Loki HTTP query frontend service, for example https://loki-query-frontend-http.netobserv.svc:3100/. `statusTLS` configuration is used when `statusUrl` is set.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "tenantID": {
                  "description": "`tenantID` is the Loki `X-Scope-OrgID` that identifies the tenant for each request. When using the Loki Operator, set it to `network`, which corresponds to a special tenant mode.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "tls": {
                  "description": "TLS client configuration for Loki URL.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "caCert": {
                      "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "certFile": {
                          "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "certKey": {
                          "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the config map or secret containing certificates",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": {
                          "description": "Type for the certificate reference: `configmap` or `secret`",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "configmap",
                            "secret"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "enable": {
                      "description": "Enable TLS",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "insecureSkipVerify": {
                      "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate. If set to `true`, the `caCert` field is ignored.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "userCert": {
                      "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "certFile": {
                          "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "certKey": {
                          "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the config map or secret containing certificates",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": {
                          "description": "Type for the certificate reference: `configmap` or `secret`",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "configmap",
                            "secret"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "microservices": {
              "description": "Loki configuration for `Microservices` mode. Use this option when Loki is installed using the microservices deployment mode (https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/#microservices-mode). It is ignored for other modes.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "ingesterUrl": {
                  "description": "`ingesterUrl` is the address of an existing Loki ingester service to push the flows to.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "querierUrl": {
                  "description": "`querierURL` specifies the address of the Loki querier service.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "tenantID": {
                  "description": "`tenantID` is the Loki `X-Scope-OrgID` header that identifies the tenant for each request.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "tls": {
                  "description": "TLS client configuration for Loki URL.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "caCert": {
                      "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "certFile": {
                          "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "certKey": {
                          "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the config map or secret containing certificates",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": {
                          "description": "Type for the certificate reference: `configmap` or `secret`",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "configmap",
                            "secret"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "enable": {
                      "description": "Enable TLS",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "insecureSkipVerify": {
                      "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate. If set to `true`, the `caCert` field is ignored.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "userCert": {
                      "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "certFile": {
                          "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "certKey": {
                          "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the config map or secret containing certificates",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": {
                          "description": "Type for the certificate reference: `configmap` or `secret`",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "configmap",
                            "secret"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "mode": {
              "description": "`mode` must be set according to the installation mode of Loki:<br> - Use `LokiStack` when Loki is managed using the Loki Operator<br> - Use `Monolithic` when Loki is installed as a monolithic workload<br> - Use `Microservices` when Loki is installed as microservices, but without Loki Operator<br> - Use `Manual` if none of the options above match your setup<br>",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "Manual",
                "LokiStack",
                "Monolithic",
                "Microservices"
              ]
            },
            "monolithic": {
              "description": "Loki configuration for `Monolithic` mode. Use this option when Loki is installed using the monolithic deployment mode (https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/#monolithic-mode). It is ignored for other modes.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "tenantID": {
                  "description": "`tenantID` is the Loki `X-Scope-OrgID` header that identifies the tenant for each request.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "tls": {
                  "description": "TLS client configuration for Loki URL.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "caCert": {
                      "description": "`caCert` defines the reference of the certificate for the Certificate Authority",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "certFile": {
                          "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "certKey": {
                          "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the config map or secret containing certificates",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": {
                          "description": "Type for the certificate reference: `configmap` or `secret`",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "configmap",
                            "secret"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "enable": {
                      "description": "Enable TLS",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "insecureSkipVerify": {
                      "description": "`insecureSkipVerify` allows skipping client-side verification of the server certificate. If set to `true`, the `caCert` field is ignored.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "userCert": {
                      "description": "`userCert` defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "certFile": {
                          "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "certKey": {
                          "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name of the config map or secret containing certificates",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "namespace": {
                          "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": {
                          "description": "Type for the certificate reference: `configmap` or `secret`",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "configmap",
                            "secret"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "url": {
                  "description": "`url` is the unique address of an existing Loki service that points to both the ingester and the querier.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            },
            "readTimeout": {
              "description": "`readTimeout` is the maximum console plugin loki query total time limit. A timeout of zero means no timeout.",
              "type": [
                "string",
                "null"
              ]
            },
            "writeBatchSize": {
              "description": "`writeBatchSize` is the maximum batch size (in bytes) of Loki logs to accumulate before sending.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int64",
              "minimum": 1
            },
            "writeBatchWait": {
              "description": "`writeBatchWait` is the maximum time to wait before sending a Loki batch.",
              "type": [
                "string",
                "null"
              ]
            },
            "writeTimeout": {
              "description": "`writeTimeout` is the maximum Loki time connection / request limit. A timeout of zero means no timeout.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "namespace": {
          "description": "Namespace where NetObserv pods are deployed.",
          "type": [
            "string",
            "null"
          ]
        },
        "processor": {
          "description": "`processor` defines the settings of the component that receives the flows from the agent, enriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "addZone": {
              "description": "`addZone` allows availability zone awareness by labelling flows with their source and destination zones. This feature requires the \"topology.kubernetes.io/zone\" label to be set on nodes.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "advanced": {
              "description": "`advanced` allows setting some aspects of the internal configuration of the flow processor. This section is aimed mostly for debugging and fine-grained performance optimizations, such as `GOGC` and `GOMAXPROCS` env vars. Set these values at your own risk.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "conversationEndTimeout": {
                  "description": "`conversationEndTimeout` is the time to wait after a network flow is received, to consider the conversation ended. This delay is ignored when a FIN packet is collected for TCP flows (see `conversationTerminatingTimeout` instead).",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "conversationHeartbeatInterval": {
                  "description": "`conversationHeartbeatInterval` is the time to wait between \"tick\" events of a conversation",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "conversationTerminatingTimeout": {
                  "description": "`conversationTerminatingTimeout` is the time to wait from detected FIN flag to end a conversation. Only relevant for TCP flows.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "dropUnusedFields": {
                  "description": "`dropUnusedFields` allows, when set to `true`, to drop fields that are known to be unused by OVS, to save storage space.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "enableKubeProbes": {
                  "description": "`enableKubeProbes` is a flag to enable or disable Kubernetes liveness and readiness probes",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "env": {
                  "description": "`env` allows passing custom environment variables to underlying components. Useful for passing some very concrete performance-tuning options, such as `GOGC` and `GOMAXPROCS`, that should not be publicly exposed as part of the FlowCollector descriptor, as they are only useful in edge debug or support scenarios.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "healthPort": {
                  "description": "`healthPort` is a collector HTTP port in the Pod that exposes the health check API",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 1
                },
                "port": {
                  "description": "Port of the flow collector (host port). By convention, some values are forbidden. It must be greater than 1024 and different from 4500, 4789 and 6081.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 1025
                },
                "profilePort": {
                  "description": "`profilePort` allows setting up a Go pprof profiler listening to this port",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "clusterName": {
              "description": "`clusterName` is the name of the cluster to appear in the flows data. This is useful in a multi-cluster context. When using OpenShift, leave empty to make it automatically determined.",
              "type": [
                "string",
                "null"
              ]
            },
            "imagePullPolicy": {
              "description": "`imagePullPolicy` is the Kubernetes pull policy for the image defined above",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "IfNotPresent",
                "Always",
                "Never"
              ]
            },
            "kafkaConsumerAutoscaler": {
              "description": "`kafkaConsumerAutoscaler` is the spec of a horizontal pod autoscaler to set up for `flowlogs-pipeline-transformer`, which consumes Kafka messages. This setting is ignored when Kafka is disabled.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "maxReplicas": {
                  "description": "`maxReplicas` is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "metrics": {
                  "description": "Metrics used by the pod autoscaler",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "containerResource": {
                        "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "container",
                          "name",
                          "target"
                        ],
                        "properties": {
                          "container": {
                            "description": "container is the name of the container in the pods of the scaling target",
                            "type": "string"
                          },
                          "name": {
                            "description": "name is the name of the resource in question.",
                            "type": "string"
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "external": {
                        "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "metric": {
                            "description": "metric identifies the target metric by name and selector",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "name is the name of the given metric",
                                "type": "string"
                              },
                              "selector": {
                                "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "object": {
                        "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "describedObject",
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "describedObject": {
                            "description": "describedObject specifies the descriptions of a object,such as kind,name apiVersion",
                            "type": "object",
                            "required": [
                              "kind",
                              "name"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "apiVersion is the API version of the referent",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "kind": {
                                "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                "type": "string"
                              },
                              "name": {
                                "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                "type": "string"
                              }
                            },
                            "additionalProperties": false
                          },
                          "metric": {
                            "description": "metric identifies the target metric by name and selector",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "name is the name of the given metric",
                                "type": "string"
                              },
                              "selector": {
                                "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "pods": {
                        "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "metric",
                          "target"
                        ],
                        "properties": {
                          "metric": {
                            "description": "metric identifies the target metric by name and selector",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "name is the name of the given metric",
                                "type": "string"
                              },
                              "selector": {
                                "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "matchExpressions": {
                                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "key",
                                        "operator"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "key is the label key that the selector applies to.",
                                          "type": "string"
                                        },
                                        "operator": {
                                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                          "type": "string"
                                        },
                                        "values": {
                                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "matchLabels": {
                                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "resource": {
                        "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "name",
                          "target"
                        ],
                        "properties": {
                          "name": {
                            "description": "name is the name of the resource in question.",
                            "type": "string"
                          },
                          "target": {
                            "description": "target specifies the target value for the given metric",
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "averageUtilization": {
                                "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int32"
                              },
                              "averageValue": {
                                "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "type": {
                                "description": "type represents whether the metric type is Utilization, Value, or AverageValue",
                                "type": "string"
                              },
                              "value": {
                                "description": "value is the target value of the metric (as a quantity).",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "type": {
                        "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "minReplicas": {
                  "description": "`minReplicas` is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "status": {
                  "description": "`status` describes the desired status regarding deploying an horizontal pod autoscaler.<br> - `Disabled` does not deploy an horizontal pod autoscaler.<br> - `Enabled` deploys an horizontal pod autoscaler.<br>",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "Disabled",
                    "Enabled"
                  ]
                }
              },
              "additionalProperties": false
            },
            "kafkaConsumerBatchSize": {
              "description": "`kafkaConsumerBatchSize` indicates to the broker the maximum batch size, in bytes, that the consumer accepts. Ignored when not using Kafka. Default: 10MB.",
              "type": [
                "integer",
                "null"
              ]
            },
            "kafkaConsumerQueueCapacity": {
              "description": "`kafkaConsumerQueueCapacity` defines the capacity of the internal message queue used in the Kafka consumer client. Ignored when not using Kafka.",
              "type": [
                "integer",
                "null"
              ]
            },
            "kafkaConsumerReplicas": {
              "description": "`kafkaConsumerReplicas` defines the number of replicas (pods) to start for `flowlogs-pipeline-transformer`, which consumes Kafka messages. This setting is ignored when Kafka is disabled.",
              "type": [
                "integer",
                "null"
              ],
              "format": "int32",
              "minimum": 0
            },
            "logLevel": {
              "description": "`logLevel` of the processor runtime",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "trace",
                "debug",
                "info",
                "warn",
                "error",
                "fatal",
                "panic"
              ]
            },
            "logTypes": {
              "description": "`logTypes` defines the desired record types to generate. Possible values are:<br> - `Flows` (default) to export regular network flows<br> - `Conversations` to generate events for started conversations, ended conversations as well as periodic \"tick\" updates<br> - `EndedConversations` to generate only ended conversations events<br> - `All` to generate both network flows and all conversations events<br>",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "Flows",
                "Conversations",
                "EndedConversations",
                "All"
              ]
            },
            "metrics": {
              "description": "`Metrics` define the processor configuration regarding metrics",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "disableAlerts": {
                  "description": "`disableAlerts` is a list of alerts that should be disabled. Possible values are:<br> `NetObservNoFlows`, which is triggered when no flows are being observed for a certain period.<br> `NetObservLokiError`, which is triggered when flows are being dropped due to Loki errors.<br>",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Name of a processor alert. Possible values are:<br> - `NetObservNoFlows`, which is triggered when no flows are being observed for a certain period.<br> - `NetObservLokiError`, which is triggered when flows are being dropped due to Loki errors.<br>",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "NetObservNoFlows",
                      "NetObservLokiError"
                    ]
                  }
                },
                "includeList": {
                  "description": "`includeList` is a list of metric names to specify which ones to generate. The names correspond to the names in Prometheus without the prefix. For example, `namespace_egress_packets_total` shows up as `netobserv_namespace_egress_packets_total` in Prometheus. Note that the more metrics you add, the bigger is the impact on Prometheus workload resources. Metrics enabled by default are: `namespace_flows_total`, `node_ingress_bytes_total`, `workload_ingress_bytes_total`, `namespace_drop_packets_total` (when `PacketDrop` feature is enabled), `namespace_rtt_seconds` (when `FlowRTT` feature is enabled), `namespace_dns_latency_seconds` (when `DNSTracking` feature is enabled). More information, with full list of available metrics: https://github.com/netobserv/network-observability-operator/blob/main/docs/Metrics.md",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Metric name. More information in https://github.com/netobserv/network-observability-operator/blob/main/docs/Metrics.md.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "namespace_egress_bytes_total",
                      "namespace_egress_packets_total",
                      "namespace_ingress_bytes_total",
                      "namespace_ingress_packets_total",
                      "namespace_flows_total",
                      "node_egress_bytes_total",
                      "node_egress_packets_total",
                      "node_ingress_bytes_total",
                      "node_ingress_packets_total",
                      "node_flows_total",
                      "workload_egress_bytes_total",
                      "workload_egress_packets_total",
                      "workload_ingress_bytes_total",
                      "workload_ingress_packets_total",
                      "workload_flows_total",
                      "namespace_drop_bytes_total",
                      "namespace_drop_packets_total",
                      "node_drop_bytes_total",
                      "node_drop_packets_total",
                      "workload_drop_bytes_total",
                      "workload_drop_packets_total",
                      "namespace_rtt_seconds",
                      "node_rtt_seconds",
                      "workload_rtt_seconds",
                      "namespace_dns_latency_seconds",
                      "node_dns_latency_seconds",
                      "workload_dns_latency_seconds"
                    ]
                  }
                },
                "server": {
                  "description": "Metrics server endpoint configuration for Prometheus scraper",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "port": {
                      "description": "The prometheus HTTP port",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int32",
                      "maximum": 65535,
                      "minimum": 1
                    },
                    "tls": {
                      "description": "TLS configuration.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "insecureSkipVerify": {
                          "description": "`insecureSkipVerify` allows skipping client-side verification of the provided certificate. If set to `true`, the `providedCaFile` field is ignored.",
                          "type": [
                            "boolean",
                            "null"
                          ]
                        },
                        "provided": {
                          "description": "TLS configuration when `type` is set to `Provided`.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "certFile": {
                              "description": "`certFile` defines the path to the certificate file name within the config map or secret",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "certKey": {
                              "description": "`certKey` defines the path to the certificate private key file name within the config map or secret. Omit when the key is not necessary.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name of the config map or secret containing certificates",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Namespace of the config map or secret containing certificates. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": {
                              "description": "Type for the certificate reference: `configmap` or `secret`",
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "configmap",
                                "secret"
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "providedCaFile": {
                          "description": "Reference to the CA file when `type` is set to `Provided`.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "file": {
                              "description": "File name within the config map or secret",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name of the config map or secret containing the file",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Namespace of the config map or secret containing the file. If omitted, the default is to use the same namespace as where NetObserv is deployed. If the namespace is different, the config map or the secret is copied so that it can be mounted as required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": {
                              "description": "Type for the file reference: \"configmap\" or \"secret\"",
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "configmap",
                                "secret"
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "type": {
                          "description": "Select the type of TLS configuration:<br> - `Disabled` (default) to not configure TLS for the endpoint. - `Provided` to manually provide cert file and a key file. - `Auto` to use OpenShift auto generated certificate using annotations.",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "Disabled",
                            "Provided",
                            "Auto"
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "multiClusterDeployment": {
              "description": "Set `multiClusterDeployment` to `true` to enable multi clusters feature. This adds `clusterName` label to flows data",
              "type": [
                "boolean",
                "null"
              ]
            },
            "resources": {
              "description": "`resources` are the compute resources required by this container. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "`FlowCollectorStatus` defines the observed state of FlowCollector",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "`conditions` represent the latest available observations of an object's state",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "namespace": {
          "description": "Namespace where console plugin and flowlogs-pipeline have been deployed. Deprecated: annotations are used instead",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "flows.netobserv.io",
      "kind": "FlowCollector",
      "version": "v1beta2"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}