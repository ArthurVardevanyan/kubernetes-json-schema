{
  "description": "ArgoCDExport is the Schema for the argocdexports API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "argoproj.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ArgoCDExport"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ArgoCDExportSpec defines the desired state of ArgoCDExport",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "argocd"
      ],
      "properties": {
        "argocd": {
          "description": "Argocd is the name of the ArgoCD instance to export.",
          "type": "string"
        },
        "image": {
          "description": "Image is the container image to use for the export Job.",
          "type": [
            "string",
            "null"
          ]
        },
        "schedule": {
          "description": "Schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
          "type": [
            "string",
            "null"
          ]
        },
        "storage": {
          "description": "Storage defines the storage configuration options.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "backend": {
              "description": "Backend defines the storage backend to use, must be \"local\" (the default), \"aws\", \"azure\" or \"gcp\".",
              "type": [
                "string",
                "null"
              ]
            },
            "pvc": {
              "description": "PVC is the desired characteristics for a PersistentVolumeClaim.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "accessModes": {
                  "description": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "dataSource": {
                  "description": "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "kind",
                    "name"
                  ],
                  "properties": {
                    "apiGroup": {
                      "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "kind": {
                      "description": "Kind is the type of resource being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of resource being referenced",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "dataSourceRef": {
                  "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "kind",
                    "name"
                  ],
                  "properties": {
                    "apiGroup": {
                      "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "kind": {
                      "description": "Kind is the type of resource being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of resource being referenced",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "resources": {
                  "description": "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\n\nThis field is immutable. It can only be set for containers.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "selector": {
                  "description": "selector is a label query over volumes to consider for binding.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "storageClassName": {
                  "description": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "volumeMode": {
                  "description": "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "volumeName": {
                  "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            },
            "secretName": {
              "description": "SecretName is the name of a Secret with encryption key, credentials, etc.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "version": {
          "description": "Version is the tag/digest to use for the export Job container image.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ArgoCDExportStatus defines the observed state of ArgoCDExport",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "phase"
      ],
      "properties": {
        "phase": {
          "description": "Phase is a simple, high-level summary of where the ArgoCDExport is in its lifecycle.\nThere are five possible phase values:\nPending: The ArgoCDExport has been accepted by the Kubernetes system, but one or more of the required resources have not been created.\nRunning: All of the containers for the ArgoCDExport are still running, or in the process of starting or restarting.\nSucceeded: All containers for the ArgoCDExport have terminated in success, and will not be restarted.\nFailed: At least one container has terminated in failure, either exited with non-zero status or was terminated by the system.\nUnknown: For some reason the state of the ArgoCDExport could not be obtained.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "argoproj.io",
      "kind": "ArgoCDExport",
      "version": "v1alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}