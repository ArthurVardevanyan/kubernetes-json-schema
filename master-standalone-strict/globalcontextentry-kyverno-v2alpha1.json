{
  "description": "GlobalContextEntry declares resources to be cached.",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "kyverno.io/v2alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "GlobalContextEntry"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Spec declares policy exception behaviors.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "apiCall": {
          "description": "Stores results from an API call which will be cached. Mutually exclusive with KubernetesResource. This can be used to make calls to external (non-Kubernetes API server) services. It can also be used to make calls to the Kubernetes API server in such cases: 1. A POST is needed to create a resource. 2. Finer-grained control is needed. Example: To restrict the number of resources cached.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "data": {
              "description": "The data object specifies the POST data sent to the server. Only applicable when the method field is set to POST.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "RequestData contains the HTTP POST data",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "description": "Key is a unique identifier for the data value",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is the data value",
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                },
                "additionalProperties": false
              }
            },
            "method": {
              "description": "Method is the HTTP request type (GET or POST).",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "GET",
                "POST"
              ]
            },
            "refreshInterval": {
              "description": "RefreshInterval defines the interval in duration at which to poll the APICall. The duration is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\".",
              "type": [
                "string",
                "null"
              ],
              "format": "duration"
            },
            "service": {
              "description": "Service is an API call to a JSON web service. This is used for non-Kubernetes API server calls. It's mutually exclusive with the URLPath field.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "url"
              ],
              "properties": {
                "caBundle": {
                  "description": "CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "url": {
                  "description": "URL is the JSON web service URL. A typical form is `https://{service}.{namespace}:{port}/{path}`.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "urlPath": {
              "description": "URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \"/api/v1/namespaces\" or  \"/apis/apps/v1/deployments\"). The format required is the same format used by the `kubectl get --raw` command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details. It's mutually exclusive with the Service field.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "kubernetesResource": {
          "description": "Stores a list of Kubernetes resources which will be cached. Mutually exclusive with APICall.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "group": {
              "description": "Group defines the group of the resource.",
              "type": [
                "string",
                "null"
              ]
            },
            "namespace": {
              "description": "Namespace defines the namespace of the resource. Leave empty for cluster scoped resources. If left empty for namespaced resources, all resources from all namespaces will be cached.",
              "type": [
                "string",
                "null"
              ]
            },
            "resource": {
              "description": "Resource defines the type of the resource. Requires the pluralized form of the resource kind in lowercase. (Ex., \"deployments\")",
              "type": [
                "string",
                "null"
              ]
            },
            "version": {
              "description": "Version defines the version of the resource.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "Status contains globalcontextentry runtime data.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "ready"
      ],
      "properties": {
        "conditions": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "lastRefreshTime": {
          "description": "Indicates the time when the globalcontextentry was last refreshed successfully for the API Call",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "ready": {
          "description": "Deprecated in favor of Conditions",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "kyverno.io",
      "kind": "GlobalContextEntry",
      "version": "v2alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}