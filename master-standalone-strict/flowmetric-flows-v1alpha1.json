{
  "description": "FlowMetric is the API allowing to create custom metrics from the collected flow logs.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "flows.netobserv.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "FlowMetric"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "FlowMetricSpec defines the desired state of FlowMetric\nThe provided API allows you to customize these metrics according to your needs.<br>\nWhen adding new metrics or modifying existing labels, you must carefully monitor the memory\nusage of Prometheus workloads as this could potentially have a high impact. Cf https://rhobs-handbook.netlify.app/products/openshiftmonitoring/telemetry.md/#what-is-the-cardinality-of-a-metric<br>\nTo check the cardinality of all NetObserv metrics, run as `promql`: `count({__name__=~\"netobserv.*\"}) by (__name__)`.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "metricName",
        "type"
      ],
      "properties": {
        "buckets": {
          "description": "A list of buckets to use when `type` is \"Histogram\". The list must be parsable as floats. When not set, Prometheus default buckets are used.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "charts": {
          "description": "Charts configuration, for the OpenShift Console in the administrator view, Dashboards menu.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Configures charts / dashboard generation associated to a metric",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "dashboardName",
              "queries",
              "title",
              "type"
            ],
            "properties": {
              "dashboardName": {
                "description": "Name of the containing dashboard. If this name does not refer to an existing dashboard, a new dashboard is created.",
                "type": "string"
              },
              "queries": {
                "description": "List of queries to be displayed on this chart. If `type` is `SingleStat` and multiple queries are provided,\nthis chart is automatically expanded in several panels (one per query).",
                "type": "array",
                "items": {
                  "description": "Configures PromQL queries",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "legend",
                    "promQL",
                    "top"
                  ],
                  "properties": {
                    "legend": {
                      "description": "The query legend that applies to each timeseries represented in this chart. When multiple timeseries are displayed, you should set a legend\nthat distinguishes each of them. It can be done with the following format: `{{ Label }}`. For example, if the `promQL` groups timeseries per\nlabel such as: `sum(rate($METRIC[2m])) by (Label1, Label2)`, you may write as the legend: `Label1={{ Label1 }}, Label2={{ Label2 }}`.",
                      "type": "string"
                    },
                    "promQL": {
                      "description": "The `promQL` query to be run against Prometheus. If the chart `type` is `SingleStat`, this query should only return\na single timeseries. For other types, a top 7 is displayed.\nYou can use `$METRIC` to refer to the metric defined in this resource. For example: `sum(rate($METRIC[2m]))`.\nTo learn more about `promQL`, refer to the Prometheus documentation: https://prometheus.io/docs/prometheus/latest/querying/basics/",
                      "type": "string"
                    },
                    "top": {
                      "description": "Top N series to display per timestamp. Does not apply to `SingleStat` chart type.",
                      "type": "integer",
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false
                }
              },
              "sectionName": {
                "description": "Name of the containing dashboard section. If this name does not refer to an existing section, a new section is created.\nIf `sectionName` is omitted or empty, the chart is placed in the global top section.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "title": {
                "description": "Title of the chart.",
                "type": "string"
              },
              "type": {
                "description": "Type of the chart.",
                "type": "string",
                "enum": [
                  "SingleStat",
                  "Line",
                  "StackArea"
                ]
              },
              "unit": {
                "description": "Unit of this chart. Only a few units are currently supported. Leave empty to use generic number.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "bytes",
                  "seconds",
                  "Bps",
                  "pps",
                  "percent",
                  ""
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "direction": {
          "description": "Filter for ingress, egress or any direction flows.\nWhen set to `Ingress`, it is equivalent to adding the regular expression filter on `FlowDirection`: `0|2`.\nWhen set to `Egress`, it is equivalent to adding the regular expression filter on `FlowDirection`: `1|2`.",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "Any",
            "Egress",
            "Ingress"
          ]
        },
        "divider": {
          "description": "When nonzero, scale factor (divider) of the value. Metric value = Flow value / Divider.",
          "type": [
            "string",
            "null"
          ]
        },
        "filters": {
          "description": "`filters` is a list of fields and values used to restrict which flows are taken into account. Oftentimes, these filters must\nbe used to eliminate duplicates: `Duplicate != \"true\"` and `FlowDirection = \"0\"`.\nRefer to the documentation for the list of available fields: https://docs.openshift.com/container-platform/latest/observability/network_observability/json-flows-format-reference.html.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "object",
              "null"
            ],
            "required": [
              "field",
              "matchType"
            ],
            "properties": {
              "field": {
                "description": "Name of the field to filter on",
                "type": "string"
              },
              "matchType": {
                "description": "Type of matching to apply",
                "type": "string",
                "enum": [
                  "Equal",
                  "NotEqual",
                  "Presence",
                  "Absence",
                  "MatchRegex",
                  "NotMatchRegex"
                ]
              },
              "value": {
                "description": "Value to filter on. When `matchType` is `Equal` or `NotEqual`, you can use field injection with `$(SomeField)` to refer to any other field of the flow.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "labels": {
          "description": "`labels` is a list of fields that should be used as Prometheus labels, also known as dimensions.\nFrom choosing labels results the level of granularity of this metric, and the available aggregations at query time.\nIt must be done carefully as it impacts the metric cardinality (cf https://rhobs-handbook.netlify.app/products/openshiftmonitoring/telemetry.md/#what-is-the-cardinality-of-a-metric).\nIn general, avoid setting very high cardinality labels such as IP or MAC addresses.\n\"SrcK8S_OwnerName\" or \"DstK8S_OwnerName\" should be preferred over \"SrcK8S_Name\" or \"DstK8S_Name\" as much as possible.\nRefer to the documentation for the list of available fields: https://docs.openshift.com/container-platform/latest/observability/network_observability/json-flows-format-reference.html.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "metricName": {
          "description": "Name of the metric. In Prometheus, it is automatically prefixed with \"netobserv_\".",
          "type": "string"
        },
        "type": {
          "description": "Metric type: \"Counter\" or \"Histogram\".\nUse \"Counter\" for any value that increases over time and on which you can compute a rate, such as Bytes or Packets.\nUse \"Histogram\" for any value that must be sampled independently, such as latencies.",
          "type": "string",
          "enum": [
            "Counter",
            "Histogram"
          ]
        },
        "valueField": {
          "description": "`valueField` is the flow field that must be used as a value for this metric. This field must hold numeric values.\nLeave empty to count flows rather than a specific value per flow.\nRefer to the documentation for the list of available fields: https://docs.openshift.com/container-platform/latest/observability/network_observability/json-flows-format-reference.html.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "FlowMetricStatus defines the observed state of FlowMetric",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "`conditions` represent the latest available observations of an object's state",
          "type": "array",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "flows.netobserv.io",
      "kind": "FlowMetric",
      "version": "v1alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}